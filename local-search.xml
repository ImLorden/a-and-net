<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一个RAG系统的实现</title>
    <link href="/a-and-net/2025/07/09/%E4%B8%80%E4%B8%AARAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/a-and-net/2025/07/09/%E4%B8%80%E4%B8%AARAG%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="RAG"><a href="#RAG" class="headerlink" title="RAG"></a>RAG</h2><h3 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h3><p>我们在日常生活中遇到不知道或不清楚的知识可能会采取咨询他人、上网查询、压力AI，或者不知道算了…但如果是在工作环境中，这些办法也如都行不通。首先，许多公司内部的业务知识无法在网络上查到，这些东西一般就涉及公司机密了。AI也是同理，由于它们没有经过这些特定的内部知识的训练，同样无法有针对性的返回准确的回答。摆烂同样不行，这是任务和需求；咨询同事或许是一个好的办法，但是同事们也都有自己的事情要做，而且有的时候会收到这样的回答：“公司手册不是有吗？你认真一点吧，自己看看去！”。这句话说的很对，但许多人何尝不是看过文档发现</p><ol><li>资料杂乱繁多不知道看哪一份资料；</li><li>长的资料手册也找不到对应问题的位置；</li><li>写资料的人表达能力有限，看不懂；</li></ol><p>于是你就想，怎么不能打造一个业务的知识库，将业务所涉及到的知识和方法都放在里面，然后提供一个查询功能，我问它什么，它就回答什么不就好了？<br>啊哈，这就是本文所要介绍的 RAG 系统。（不是老鼠那个 RAT）</p><blockquote><p>RAG (Retrieval Augmented Generation - 检索增强生成)是一种结合了信息检索和文本生成能力的人工智能范式。它旨在解决传统大语言模型（LLM）在知识时效性、事实准确性以及无法访问特定领域或最新信息等方面的局限性。</p></blockquote><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>要搭建 RAG 系统，首先需要了解以下几个关键概念：</p><ol><li><strong>大语言模型 (LLM):</strong> RAG 的核心是利用强大的 LLM 进行文本生成。LLM 拥有强大的语言理解、生成和推理能力，但其知识是基于训练时的数据，可能不包含最新或特定领域的信息，也可能“一本正经地胡说八道”（hallucination）。</li><li><strong>外部知识库 (Knowledge Base):</strong> 这是一个包含丰富、最新或专业知识的数据源。它可以是文档集合、数据库、网页等。在 RAG 中，LLM 不再仅仅依赖其内部参数化知识，而是可以从这个外部知识库中检索信息。</li><li><strong>检索器 (Retriever):</strong> 检索器的任务是从外部知识库中找出与用户查询<strong>最相关</strong>的信息片段（或文档）。这通常通过将查询和知识库中的文档转换为向量（Embedding），然后计算这些向量之间的相似度来实现（例如，使用向量数据库进行最近邻搜索）。</li><li><strong>生成器 (Generator):</strong> 生成器就是 LLM 本身。在 RAG 中，LLM 接收的输入不再仅仅是用户查询，而是“用户查询 + 检索到的相关信息片段”。LLM 利用这些检索到的信息作为上下文，生成最终的答案。这使得 LLM 的回答更加<strong>有依据、准确</strong>，并能涵盖训练数据之外的新知识。</li><li><strong>增强 (Augmentation):</strong> “增强”体现在 LLM 不再是孤立地生成内容，而是<strong>“被检索到的信息所增强”</strong>。检索器为生成器提供了实时的、外部的、可能更精确的事实依据，极大地提升了 LLM 的表现。</li></ol><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p>一个典型的 RAG 系统实现通常包括以下几个主要步骤：</p><ol><li><strong>数据准备与索引 (Data Preparation &amp; Indexing):</strong><ul><li><strong>文档加载 (Document Loading):</strong> 从各种来源（如 <code>.txt</code>, <code>.md</code>, <code>.pdf</code>, <code>.docx</code>, 数据库等）加载原始数据。</li><li><strong>文档分割&#x2F;分块 (Chunking):</strong> 将加载的长文档分割成大小适中、语义连贯的小片段（chunks）。这是关键一步，因为过大或过小的片段都会影响检索效果。常用的策略有固定大小分块、递归字符分块、语义分块等。</li><li><strong>文本嵌入 (Text Embedding):</strong> 使用一个预训练的文本嵌入模型（如 <code>SentenceTransformer</code> 模型）将每个文本片段转换为高维数值向量（Embedding）。这些向量捕获了文本的语义信息。</li><li><strong>向量存储 (Vector Store):</strong> 将这些文本向量及其对应的原始文本片段存储到向量数据库（如 ChromaDB, Faiss, Pinecone, Weaviate 等）中。向量数据库能够高效地进行向量相似度搜索。</li></ul></li><li><strong>检索 (Retrieval):</strong><ul><li><strong>查询嵌入 (Query Embedding):</strong> 当用户提出一个问题（Query）时，使用与文档嵌入相同的嵌入模型，将用户查询也转换为一个向量。</li><li><strong>相似度搜索 (Similarity Search):</strong> 在向量数据库中执行相似度搜索，找出与用户查询向量最相似的 <code>Top-K</code> 个文档片段。这些片段被认为是与用户问题最相关的上下文。</li></ul></li><li><strong>（可选）重排 (Reranking):</strong><ul><li>为了进一步提高检索的精确性，可以引入一个<strong>重排器</strong>（通常是 Cross-Encoder 模型）。</li><li>重排器会接收用户查询和初步检索到的 <code>Top-K</code> 个片段，并对每个“查询-片段”对生成一个更精细的相关性分数。</li><li>根据这些分数，重新排序并选择 <code>Top-N</code> 个（通常 <code>N &lt; K</code>）最相关的片段，以提供给生成器更精炼、更高质量的上下文。</li></ul></li><li><strong>生成 (Generation):</strong><ul><li><strong>构建 Prompt (Prompt Construction):</strong> 将用户查询和经过检索&#x2F;重排得到的 <code>Top-N</code> 个相关文本片段组合成一个结构化的 Prompt。这个 Prompt 会明确指示 LLM 的角色、任务，并包含“基于提供的上下文作答，不要编造信息”等指令。</li><li><strong>LLM 推理 (LLM Inference):</strong> 将构建好的 Prompt 发送给大语言模型（如 Google Gemini, OpenAI GPT 等）。LLM 利用其强大的语言理解和生成能力，结合提供的上下文信息，生成一个连贯、准确的答案。</li><li><strong>答案输出 (Answer Output):</strong> LLM 返回生成的答案，呈现给用户。</li></ul></li></ol><p>以下是一个简单的搭建原理图：</p><p><img src="/a-and-net/imgs/RAG%20%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="RAG 示意图"></p><h3 id="核心组件概览"><a href="#核心组件概览" class="headerlink" title="核心组件概览"></a>核心组件概览</h3><ol><li><strong>知识库 (Knowledge Base)：</strong> 你的云讯通内部资料（文档、FAQ 等）。</li><li><strong>文档加载器 (Document Loader)：</strong> 读取你的知识库文件。</li><li><strong>文本分割器 (Text Splitter)：</strong> 将长文档分割成小块（<code>chunks</code>），方便检索。</li><li><strong>嵌入模型 (Embedding Model)：</strong> 将文本块和用户问题转换为向量。</li><li><strong>向量数据库 (Vector Store)：</strong> 存储所有文本块的向量，用于快速检索。</li><li><strong>本地大语言模型 (LLM)：</strong> 用于理解问题和生成答案。</li><li><strong>RAG 框架 (LangChain)：</strong> 串联以上所有组件，简化开发。</li></ol><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><h4 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h4><blockquote><p>处理环境问题真的是想说：人难做，屎难吃。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install python@3.12 <br>mkdir rag<br>cd rag<br>uv venv --python 3.12<br>source .venv/bin/activate<br>uv pip install &quot;chromadb&gt;=1.0.15&quot; &quot;google-genai&gt;=1.24.0&quot; &quot;python-dotenv&gt;=1.1.1&quot; &quot;sentence-transformers&gt;=5.0.0&quot;<br></code></pre></td></tr></table></figure><h5 id="uv-介绍"><a href="#uv-介绍" class="headerlink" title="uv 介绍"></a>uv 介绍</h5><p><code>uv</code> 是由 <strong>Rye</strong>（由 Astro 框架的创建者 David Wadsley 开发）团队推出的一个<strong>高性能</strong>的 Python 包安装器和解析器。它旨在成为 <code>pip</code> 和 <code>pip-tools</code> 的<strong>超快速替代品</strong>。<code>uv</code> 由于使用 <strong>Rust 编写</strong>， 在执行依赖解析和包安装时比 <code>pip</code> 快 <strong>10 到 100 倍</strong>。这意味着更快的开发周期、更快的 CI&#x2F;CD 构建时间。</p><h5 id="包介绍"><a href="#包介绍" class="headerlink" title="包介绍"></a><strong>包介绍</strong></h5><ul><li><p><strong>sentence_transformers</strong><br>专注于将文本（句子、段落、甚至短文档）转换为高质量的向量（也叫“嵌入”或“embeddings”）。这些向量捕捉了文本的语义信息，使得语义相似的文本在向量空间中的距离也更近。</p></li><li><p><strong>chromadb</strong><br>ChromaDB 是一个 开源的向量数据库 (Vector Database)。它是专门为存储、管理和搜索向量嵌入 (vector embeddings) 而设计的</p></li><li><p><strong>google-genai</strong><br><code>google-genai</code> 是 Google 官方提供的用于<strong>与 Google Gemini 系列模型进行交互的 Python 客户端库</strong>。它是 Google AI Studio 和 Gemini API 的官方 SDK</p></li><li><p><strong>python-dotenv</strong><br>用于加载 <code>.env</code> 文件中的环境变量</p></li></ul><h5 id="获取-Google-Gemini-接口ID"><a href="#获取-Google-Gemini-接口ID" class="headerlink" title="获取 Google Gemini 接口ID"></a><strong>获取 Google Gemini 接口ID</strong></h5><ul><li>前往<a href="https://aistudio.google.com/apikey">Gemini 官网</a>注册获取。</li><li>创建文件 <code>.env</code></li><li>输入 <code>GEMINI_API_KEY=xxx</code></li></ul><h4 id="2-代码逻辑"><a href="#2-代码逻辑" class="headerlink" title="2. 代码逻辑"></a>2. 代码逻辑</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-keyword">import</span> chromadb<br><span class="hljs-keyword">from</span> sentence_transformers <span class="hljs-keyword">import</span> SentenceTransformer, CrossEncoder<br><span class="hljs-keyword">from</span> dotenv <span class="hljs-keyword">import</span> load_dotenv<br><span class="hljs-keyword">from</span> google <span class="hljs-keyword">import</span> genai<br><br><span class="hljs-comment"># 识别模型放在本地，以免重复下载</span><br>LOCAL_EMBEDDING_MODEL_PATH = <span class="hljs-string">&quot;./local_models/text2vec-base-chinese&quot;</span><br>LOCAL_CROSS_ENCODER_MODEL_PATH = <span class="hljs-string">&quot;./local_models/mmarco-mMiniLMv2-L12-H384-v1&quot;</span><br>  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">split_into_chunks</span>(<span class="hljs-params">doc_file: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(doc_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>content = file.read()<br><span class="hljs-keyword">return</span> [chunk <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> content.split(<span class="hljs-string">&quot;\n\n&quot;</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">embed_chunk</span>(<span class="hljs-params">chunk: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>]:<br>embedding = embedding_model.encode(chunk, normalize_embeddings=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> embedding.tolist()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_embeddings</span>(<span class="hljs-params">chunks: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], embeddings: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:<br><span class="hljs-keyword">for</span> i, (chunk, embedding) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">zip</span>(chunks, embeddings)):<br>chromadb_collection.add(<br>documents=[chunk],<br>embeddings=[embedding],<br>ids=[<span class="hljs-built_in">str</span>(i)]<br>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">retrieve</span>(<span class="hljs-params">query: <span class="hljs-built_in">str</span>, top_k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>query_embedding = embed_chunk(query)<br>results = chromadb_collection.query(<br>query_embeddings=[query_embedding],<br>n_results=top_k<br>)<br><span class="hljs-keyword">return</span> results[<span class="hljs-string">&#x27;documents&#x27;</span>][<span class="hljs-number">0</span>]<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rerank</span>(<span class="hljs-params">query: <span class="hljs-built_in">str</span>, retrieved_chunks: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], top_k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>cross_encoder = CrossEncoder(LOCAL_CROSS_ENCODER_MODEL_PATH)<br>pairs = [(query, chunk) <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> retrieved_chunks]<br>scores = cross_encoder.predict(pairs)<br>scored_chunks = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">zip</span>(retrieved_chunks, scores))<br>scored_chunks.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> [chunk <span class="hljs-keyword">for</span> chunk, _ <span class="hljs-keyword">in</span> scored_chunks][:top_k]<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">query: <span class="hljs-built_in">str</span>, chunks: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">str</span>:<br>prompt = <span class="hljs-string">f&quot;&quot;&quot;</span><br><span class="hljs-string">你是一位知识助手，请根据用户的问题和下列片段生成准确的回答。</span><br><span class="hljs-string">用户问题: <span class="hljs-subst">&#123;query&#125;</span></span><br><span class="hljs-string">相关片段:<span class="hljs-subst">&#123;<span class="hljs-string">&quot;\n\n&quot;</span>.join(chunks)&#125;</span></span><br><span class="hljs-string">请基于上述内容作答，不要编造信息。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;prompt&#125;</span>\n\n---\n&quot;</span>)<br>response = google_client.models.generate_content(<br>model=<span class="hljs-string">&quot;gemini-2.5-flash&quot;</span>,<br>contents=prompt<br>)<br><span class="hljs-keyword">return</span> response.text<br><br>  <br>query = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入你的问题：&quot;</span>)<br>embedding_model = SentenceTransformer(LOCAL_EMBEDDING_MODEL_PATH)<br>chromadb_client = chromadb.EphemeralClient()<br>chromadb_collection = chromadb_client.get_or_create_collection(name=<span class="hljs-string">&quot;default&quot;</span>)<br>chunks = split_into_chunks(<span class="hljs-string">&quot;doc.md&quot;</span>) <span class="hljs-comment"># 拿到文本信息</span><br>embeddings = [embed_chunk(chunk) <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> chunks] <span class="hljs-comment"># 切分词条</span><br>save_embeddings(chunks, embeddings) <span class="hljs-comment"># 存入数据库</span><br>retrieved_chunks = retrieve(query, <span class="hljs-number">5</span>) <span class="hljs-comment"># 计算相似度，拿到前5个相关片段</span><br>reranked_chunks = rerank(query, retrieved_chunks, <span class="hljs-number">5</span>) <span class="hljs-comment"># 使用CrossEncoder为片段重新排序</span><br>load_dotenv() <span class="hljs-comment"># 加载环境变量-API密钥</span><br>google_client = genai.Client() <span class="hljs-comment"># 初始化Google GenAI客户端</span><br>answer = generate(query, reranked_chunks) <span class="hljs-comment"># 生成回答</span><br><span class="hljs-built_in">print</span>(answer)<br></code></pre></td></tr></table></figure><h3 id="前后端搭建"><a href="#前后端搭建" class="headerlink" title="前后端搭建"></a>前后端搭建</h3><blockquote><p>使用 flask</p></blockquote><h4 id="后端（Flask-API）"><a href="#后端（Flask-API）" class="headerlink" title="后端（Flask API）"></a>后端（Flask API）</h4><ul><li>主流程已在 main.py 封装为 get_answer(question: str) -&gt; str，实现了分块、嵌入、检索、重排、生成等RAG流程。</li><li>API接口在 app.py，提供 &#x2F;ask POST接口，接收 JSON 格式问题，返回智能问答结果。</li><li>欢迎页：根路径 &#x2F; 支持 GET，返回欢迎信息。</li><li>端口：Flask 服务运行在 5001 端口。</li></ul><h4 id="前端（Streamlit）"><a href="#前端（Streamlit）" class="headerlink" title="前端（Streamlit）"></a>前端（Streamlit）</h4><ul><li>文件：webui.py</li><li>功能：</li><li>顶部渐变标题与副标题</li><li>左侧：智能对话区（历史消息、输入框、发送按钮）</li><li>右侧：系统核心功能、技术架构、统计信息、FAQ快捷提问</li><li>FAQ一键提问，自动调用后端API</li><li>对话历史自动刷新</li><li>兼容性：已将 st.experimental_rerun() 替换为 st.rerun()，适配新版</li></ul><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><ul><li>requirements.txt 已包含 Flask、streamlit、requests、sentence-transformers、chromadb、python-dotenv、google-generativeai 等依赖。</li></ul><h4 id="启动与测试流程"><a href="#启动与测试流程" class="headerlink" title="启动与测试流程"></a>启动与测试流程</h4><ol><li><p>后端启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .venv/bin/activate<br>python3 app.py<br></code></pre></td></tr></table></figure></li><li><p>前端启动</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">streamlit run webui.py<br></code></pre></td></tr></table></figure></li></ol><p>访问 <a href="http://localhost:8501/">http://localhost:8501</a></p><h4 id="下一步建议"><a href="#下一步建议" class="headerlink" title="下一步建议"></a>下一步建议</h4><ul><li>可继续美化前端、增加对话清空、导出、用户登录等功能</li><li>可考虑部署到服务器，供团队或客户使用</li><li>可扩展知识库、支持多文档、权限管理等</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 网站建站</title>
    <link href="/a-and-net/2025/06/17/hexo-%E7%BD%91%E7%AB%99%E5%BB%BA%E7%AB%99/"/>
    <url>/a-and-net/2025/06/17/hexo-%E7%BD%91%E7%AB%99%E5%BB%BA%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="安装与部署"><a href="#安装与部署" class="headerlink" title="安装与部署"></a>安装与部署</h3><h4 id="一、hexo-项目创建"><a href="#一、hexo-项目创建" class="headerlink" title="一、hexo 项目创建"></a>一、hexo 项目创建</h4><ol><li><p>安装 node.js 和 git<br>前往官网使用安装包下载</p></li><li><p>安装 hexo<br><code>npm install -g hexo-cli</code><br>&#96;&#96;</p></li><li><p>创建 hexo 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init hexo-blog<br><span class="hljs-built_in">cd</span> hexo-blog<br>npm install  <span class="hljs-comment"># 安装项目依赖</span><br></code></pre></td></tr></table></figure></li><li><p>修改 url<br>在文件 <code>_config.yml</code> 中添加 url<br><code>url: http://aandnet.lorden.xyz/</code></p></li></ol><h4 id="二、服务器设置"><a href="#二、服务器设置" class="headerlink" title="二、服务器设置"></a>二、服务器设置</h4><ol><li>域名新增节点</li></ol><ul><li>根据我的目标 <code>url: http://aandnet.lorden.xyz/</code>，在阿里云解析DNS中添加新的<strong>主机记录</strong></li></ul><ol><li>创建网站目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /var/www/a-net-blog/public<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R jay:jay /var/www/a-net-blog/public<br><br><span class="hljs-built_in">sudo</span> nano /etc/nginx/sites-available/a-net-blog.conf<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># a-net-blog.conf</span><br>server &#123;<br>    listen 80;<br>    server_name 47.109.159.2; <span class="hljs-comment"># 或你的域名</span><br><br>    root /var/www/a-net-blog/public;<br>    index index.html index.htm;<br><br>    location / &#123;<br>        try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>重载 nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s /etc/nginx/sites-available/a-net-blog.conf /etc/nginx/sites-enabled/<br><span class="hljs-built_in">sudo</span> nginx -t<br><span class="hljs-built_in">sudo</span> systemctl restart nginx <span class="hljs-comment"># 首次启动或配置大改用restart，小改用reload</span><br></code></pre></td></tr></table></figure></li><li><p>创建 git 裸仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /var/repo/a-net-blog-deploy.git<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R jay:jay /var/repo/a-net-blog-deploy.git <span class="hljs-comment"># 确保jay用户有权限</span><br><span class="hljs-built_in">cd</span> /var/repo/a-net-blog-deploy.git<br>git init --bare<br></code></pre></td></tr></table></figure></li></ol><h4 id="三、创建-Git-Hook-脚本"><a href="#三、创建-Git-Hook-脚本" class="headerlink" title="三、创建 Git Hook 脚本"></a>三、创建 Git Hook 脚本</h4><ol><li>创建 <code>post-receive</code> 脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /var/repo/a-net-blog-deploy.git/hooks<br><span class="hljs-built_in">sudo</span> nano post-receive<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># post-receive</span><br><span class="hljs-comment">#!/bin/bash</span><br><span class="hljs-comment"># 定义网站根目录，Git 将会把内容检出到这里</span><br>PUBLIC_WWW=<span class="hljs-string">&quot;/var/www/a-net-blog/public&quot;</span><br><br><span class="hljs-comment"># 使用 Git 命令将最新内容检出到网站根目录</span><br><span class="hljs-comment"># --work-tree 指定工作目录，-f 强制检出</span><br>git --work-tree=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span>&quot;</span> checkout -f master<br></code></pre></td></tr></table></figure><ol start="2"><li><p>赋予脚本执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> +x post-receive<br></code></pre></td></tr></table></figure></li><li><p>配置本地 Hexo 部署信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># _config.yml</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">ssh://jay@47.109.159.2:2222/var/repo/a-net-blog-deploy.git</span>  <span class="hljs-comment"># 修改了 ssh 访问端口，从22改为了2222，因为我的公网限制了对22端口的访问</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure></li><li><p>修改 public 文件夹权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chown</span> -R jay:jay /var/www/a-net-blog/public<br></code></pre></td></tr></table></figure></li></ol><h4 id="四、尝试部署"><a href="#四、尝试部署" class="headerlink" title="四、尝试部署"></a>四、尝试部署</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <br>hexo generate <br>hexo deploy<br><br><span class="hljs-comment"># 或者 hexo clean; hexo g; hexo d</span><br></code></pre></td></tr></table></figure><p>部署成功。</p><h4 id="五、代码更新"><a href="#五、代码更新" class="headerlink" title="五、代码更新"></a>五、代码更新</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status  <span class="hljs-comment"># 查看修改。</span><br>git add .   <span class="hljs-comment"># 暂存修改。</span><br>git commit -m <span class="hljs-string">&quot;Your meaningful commit message&quot;</span> <span class="hljs-comment"># 提交修改到本地仓库。</span><br><br><span class="hljs-comment"># 或者 git status; git add .; git commit -m &quot;Your meaningful commit message&quot;</span><br></code></pre></td></tr></table></figure><h3 id="认识项目"><a href="#认识项目" class="headerlink" title="认识项目"></a>认识项目</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs text">hexo-blog/<br>├── .deploy_git/           # 临时 git 仓库<br>├── .git/                  # Git 管理文件<br>├── .github/               # 依赖管理<br>│   └── dependabot.yml     # 入口文件<br>├── node_modules/          # node.js 项目的依赖项<br>├── scaffolds              # 模板文件夹<br>├── source/                # 资源管理<br>│ ├── _posts             # 博客文章<br>│   └── dependabot.yml     # 入口文件<br>├── theme/                 # 主题管理<br>├── .gitignore             # Git 忽略<br>├── _config.yml            # 网站配置<br>└── package.json           # 项目依赖<br></code></pre></td></tr></table></figure><h4 id="deploy-git"><a href="#deploy-git" class="headerlink" title=".deploy_git"></a>.deploy_git</h4><p>是由 Hexo 的 Git 部署插件 (<code>hexo-deployer-git</code>) 在你的本地 Hexo 项目中创建和维护的一个临时的、内部的 Git 仓库</p><h4 id="git"><a href="#git" class="headerlink" title=".git"></a>.git</h4><p><code>.git</code> 文件夹是 Hexo 项目本身的 Git 仓库</p><h4 id="github-dependabot-yml"><a href="#github-dependabot-yml" class="headerlink" title=".github&#x2F;dependabot.yml"></a>.github&#x2F;dependabot.yml</h4><p>自动管理和更新 Hexo 博客所依赖的 npm 包，从而提高项目的安全性和维护性。</p><h4 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h4><p><code>node_modules</code> 文件夹是 <code>npm</code> (Node Package Manager) 或 <code>yarn</code> 等包管理器下载和安装项目所有依赖项（即第三方库、模块或包）的地方。<code>npm</code> 会将这些直接依赖以及它们各自的依赖（这些依赖的依赖…）递归地下载并安装到 <code>node_modules</code> 文件夹中。</p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>模版文件夹。 新建文章时，Hexo 会根据 scaffold 来创建文件。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹。 是存放用户资源的地方。 除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。 Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>如果使用 <code>npm install --save hexo-theme-fluid</code> 这样的命令安装主题，主题的实际文件会下载到 <code>node_modules/hexo-theme-fluid/</code>。但 Hexo 在主 <code>_config.yml</code> 里配置 <code>theme: fluid</code> 时，会智能地知道去 <code>node_modules</code> 查找。不过，<code>themes/</code> 仍然是 Hexo 默认和推荐存放手动安装或自定义主题的地方。</p><h1 id="Hexo-博客部署与-Git-Hook-自动化更新原理揭秘"><a href="#Hexo-博客部署与-Git-Hook-自动化更新原理揭秘" class="headerlink" title="Hexo 博客部署与 Git Hook 自动化更新原理揭秘"></a>Hexo 博客部署与 Git Hook 自动化更新原理揭秘</h1><p>经过一番努力，你的 Hexo 博客已经成功地部署上线，并通过 <code>hexo deploy</code> 实现了自动化更新。这背后并非魔法，而是 Git Hooks (Git 钩子) 在默默发挥作用。本文将深入浅出地为你揭示从本地 <code>hexo deploy</code> 到网站内容更新的完整逻辑和原理。</p><h2 id="核心原理：Git-Hooks-Git-钩子"><a href="#核心原理：Git-Hooks-Git-钩子" class="headerlink" title="核心原理：Git Hooks (Git 钩子)"></a>核心原理：Git Hooks (Git 钩子)</h2><p>整个自动化部署和更新流程的基石是 <strong>Git Hooks（Git 钩子）</strong>。Git 钩子是 Git 版本控制系统提供的一种强大机制，<strong>它允许你在 Git 仓库生命周期的特定事件发生时，自动执行预设的脚本。</strong></p><p>在我们的 Hexo 自动化部署场景中，最关键的钩子是 <code>post-receive</code>。当远程 Git 仓库成功接收到代码推送之后，<code>post-receive</code> 钩子就会被自动触发执行。</p><h2 id="部署流程原理详解"><a href="#部署流程原理详解" class="headerlink" title="部署流程原理详解"></a>部署流程原理详解</h2><p>让我们将整个过程拆解为几个关键步骤。</p><h3 id="1-本地操作："><a href="#1-本地操作：" class="headerlink" title="1. 本地操作："></a>1. 本地操作：</h3><p><code>hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</code></p><p>这是你在本地计算机上执行的一系列命令，用于准备和发起部署：</p><ul><li><p><strong><code>hexo clean</code></strong>: 这个命令会清除你本地 <code>public/</code> 目录下上一次生成的静态文件，以及 Hexo 的缓存文件。这样做是为了确保每次部署都是基于最新的源文件，避免旧文件残留或缓存导致的问题。</p></li><li><p><strong><code>hexo generate</code></strong>: Hexo 会根据你本地 Hexo 项目目录下的源文件（如 Markdown 格式的文章、图片、主题文件、配置文件 <code>_config.yml</code> 等），将其编译并生成最终的静态网站文件。这些文件包括 HTML、CSS、JavaScript 以及图片资源等，它们会存放在你本地项目的 <code>public/</code> 目录下。这些文件就是你的博客最终在用户浏览器中呈现的内容。</p></li><li><p><strong><code>hexo deploy</code></strong>: 这是整个部署流程的触发点。</p><ul><li><code>hexo-deployer-git</code> 插件会发挥作用，它会使用你本地项目中的 <code>.deploy_git/</code> 隐藏目录（这是一个临时的 Git 仓库）作为中转。</li><li>该插件会将 <code>public/</code> 目录下所有<strong>生成的静态网站文件</strong>复制到这个 <code>.deploy_git/</code> 临时 Git 仓库中。</li><li>随后，它会执行标准的 Git 命令，如 <code>git add .</code>、<code>git commit -m &quot;Site updated: [日期时间]&quot;</code>等，并将这些提交<strong>推送到</strong>你在 <code>_config.yml</code> 中 <code>deploy</code> 配置项所指定的远程 Git 仓库。</li><li>在你当前的配置中，这个远程仓库是你的服务器上的一个 <strong>Git 裸仓库（Bare Repository）</strong>，位于 <code>ssh://jay@47.109.159.2:2222/var/repo/a-net-blog-deploy.git</code>。</li></ul></li></ul><p>简而言之，<code>hexo deploy</code> 的本质就是通过 SSH 协议，将你本地生成的静态网站文件像普通的 Git 代码一样推送到服务器上的特定 Git 仓库。</p><h3 id="2-服务器端：Git-裸仓库接收推送"><a href="#2-服务器端：Git-裸仓库接收推送" class="headerlink" title="2. 服务器端：Git 裸仓库接收推送"></a>2. 服务器端：Git 裸仓库接收推送</h3><p>一旦你的本地 <code>hexo deploy</code> 命令成功将静态文件推送到服务器上的 <code>/var/repo/a-net-blog-deploy.git</code> 这个 Git 裸仓库，该仓库就会立即识别到一个 <code>post-receive</code> 事件。</p><ul><li>Git 裸仓库（Bare Repository）与普通 Git 仓库的区别在于，它没有工作目录，只保存了 Git 的版本历史数据，主要用于团队协作的中央存储或作为部署目标。</li><li><code>post-receive</code> 钩子脚本就是在此刻被 Git 服务端自动调用的。</li></ul><h3 id="3-服务器端：post-receive-脚本的自动化执行"><a href="#3-服务器端：post-receive-脚本的自动化执行" class="headerlink" title="3. 服务器端：post-receive 脚本的自动化执行"></a>3. 服务器端：<code>post-receive</code> 脚本的自动化执行</h3><p>你之前在服务器上配置并修改的 <code>post-receive</code> 脚本就位于 Git 裸仓库的 <code>hooks</code> 目录下（<code>/var/repo/a-net-blog-deploy.git/hooks/post-receive</code>）。当 Git 裸仓库接收到推送后，它就会自动运行此脚本。</p><p>这个脚本的核心任务是将刚刚推送过来的最新网站文件从 Git 仓库中“释放”出来，并放到 Web 服务器（Nginx）可以访问的目录下：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># post-receive</span><br><br><span class="hljs-comment"># 1. 定义网站根目录 (Nginx 指向的目录)</span><br>PUBLIC_WWW=<span class="hljs-string">&quot;/var/www/a-net-blog/public&quot;</span><br><br><span class="hljs-comment"># 2. 将 Git 仓库中最新的内容检出到网站根目录</span><br><span class="hljs-comment"># --work-tree 指定工作树，-f 强制检出</span><br>git --work-tree=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PUBLIC_WWW&#125;</span>&quot;</span> checkout -f master<br><br><span class="hljs-comment"># 3. (可选但推荐，以防git --work-tree模式不彻底清除旧文件)</span><br><span class="hljs-comment"># rsync -av --delete --exclude=.git/ --exclude=.git /tmp/hexo-deploy/ &quot;$PUBLIC_WWW&quot;/</span><br><br><span class="hljs-comment"># 权限处理的简化：</span><br><span class="hljs-comment"># 我们此前遇到的 sudoers 问题已通过手动将 /var/www/a-net-blog/public 的所有者改为 jay:jay 解决。</span><br><span class="hljs-comment"># 且由于 &quot;others&quot; 具有读权限，Nginx 能够正常访问。</span><br><span class="hljs-comment"># 因此，脚本中不再需要复杂的 chown 或 sudo 命令。</span><br><br><span class="hljs-comment"># 4. (如果需要) 重新加载 Nginx 配置</span><br><span class="hljs-comment"># 如果你的 Nginx 配置（例如反向代理规则）有变化，可能需要执行以下命令，</span><br><span class="hljs-comment"># 但对于简单的内容更新，通常不需要：</span><br><span class="hljs-comment"># systemctl reload nginx</span><br></code></pre></td></tr></table></figure><p><strong>这个脚本的关键逻辑是：</strong></p><ul><li><strong>检出文件：</strong> 脚本使用 <code>git --work-tree=&quot;/var/www/a-net-blog/public&quot; checkout -f master</code> 命令。这会强制 Git 将裸仓库中 <code>master</code> 分支的最新内容直接检出（复制并覆盖）到 <code>/var/www/a-net-blog/public</code> 这个 Nginx 网站根目录中。</li><li><strong>权限处理的巧妙简化：</strong> 最初我们尝试在脚本中用 <code>sudo chown</code> 来改变文件所有者。但由于 <code>sudoers</code> 配置的复杂性，我们采取了更直接有效的策略：<ul><li>在服务器上，你已经一次性地将 <code>/var/www/a-net-blog/public</code> 目录及其内容的<strong>所有者</strong>设置为了 <code>jay</code> 用户，<strong>组</strong>设置为了 <code>jay</code>。</li><li>同时，你确保了“其他人”对该目录拥有“读取”权限 (<code>r-x</code>)。</li><li>当 <code>hexo deploy</code> 推送文件时，这些文件自然会以 <code>jay</code> 用户身份创建（因为你是 <code>jay</code> 用户在推送）。</li><li>由于 Nginx (通常运行为 <code>www-data</code> 用户) 作为“其他人”仍然具有读取权限，它能够正常访问并提供这些文件。</li><li>因此，<code>post-receive</code> 脚本中不再需要任何 <code>chown</code> 或 <code>sudo</code> 命令，这大大简化了流程，并避免了权限问题。</li></ul></li></ul><h3 id="4-Nginx-提供服务"><a href="#4-Nginx-提供服务" class="headerlink" title="4. Nginx 提供服务"></a>4. Nginx 提供服务</h3><p>一旦 <code>post-receive</code> 脚本将最新的静态网站文件成功复制并同步到 <code>/var/www/a-net-blog/public</code> 目录后，Nginx Web 服务器会立即提供这些更新后的内容。当用户在浏览器中访问你的博客网址时，Nginx 就会从这个目录中抓取最新版本的 HTML、CSS、JS 等文件，并发送给用户的浏览器进行展示。</p><h2 id="总结流程图"><a href="#总结流程图" class="headerlink" title="总结流程图"></a>总结流程图</h2><p>代码段</p><pre><code class=" mermaid">graph TD    A[本地电脑] --&gt; B&#123;本地命令&#125;    B --&gt;|hexo clean| C[清理生成目录]    B --&gt;|hexo generate| D[生成静态文件]    B --&gt;|hexo deploy| E[Git推送]    E --&gt;|SSH连接 &amp; Git Push| F[Git裸仓库]    F --&gt;|触发| G[执行钩子脚本]    G --&gt;|检出文件| H[部署目录]    H --&gt; I[Nginx服务]    I --&gt; J[用户访问]</code></pre><p>通过这一系列步骤和 Git Hooks 的巧妙运用，你实现了从本地内容创作到远程网站更新的自动化流程，极大地提高了效率，让你可以专注于内容的创作本身。</p>]]></content>
    
    
    <categories>
      
      <category>Computer</category>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>前端</tag>
      
      <tag>服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/a-and-net/2025/06/15/hello-world/"/>
    <url>/a-and-net/2025/06/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
